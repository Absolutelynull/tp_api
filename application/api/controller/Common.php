<?php


namespace app\api\controller;


use think\Controller;
use think\Image;
use think\Request;
use think\Validate;

class Common extends Controller
{

    protected $request; //用来处理参数
    protected $validate; //用来验证数据/参数
    protected $params; //过滤后符合要求的参数

    protected $rules = [
        'User' => [
            'login' => [
                'user_name' => ['require'],
                'user_pwd' => ['require', 'length' => 32],
            ],
            'register' => [
                'user_name' => ['require'],
                'user_pwd' => ['require', 'length' => 32],
                'code' => ['require', 'length' => 6, 'number'],
            ],
            'upload_head_img' => [
                'user_id' => ['require'],
                'user_icon' => 'require|image|fileSize:2000000|fileExt:jpg,png,bmp,jpeg'
            ],
            'chang_pwd' => [
                'user_name' => ['require'],
                'user_ini_pwd' => 'require|length:32',
                'user_pwd' => 'require|length:32',
            ],
            'find_pwd' => [
                'user_name' => ['require'],
                'user_pwd' => 'require|length:32',
                'code' => 'require|length:6',
            ],
            'bind_email' => [
                'user_id' => ['require'],
                'email' => 'require|email',
                'code' => 'require|length:6',
            ],
            'bind_phone' => [
                'user_id' => ['require','number'],
                'phone' =>['require','regex'=>'/^1[34578]\d{9}$/'],
                'code' => 'require|length:6',
            ],
            'nickname' => [
                'user_id' => ['require','number'],
                'user_nickname' =>['require','chsDash'],
            ]
        ],
        'Code' => [
            'get_code' => [
                'username' => ['require'],
                'is_exist' => ['require', 'number', 'length' => 1],
            ],
        ],
        'Article'=>[
            'add_article'=>[
                'article_uid'=>'require|number',
                'article_title'=>'require|chsDash',
                'article_content'=>'require',
            ],
            'article_list'=>[
                'user_id'=>'require|number',
                'num'=>'number',
                'page'=>'number',
            ],
            'article_detail'=>[
                'article_id'=>'require|number',
            ],
            'update_article'=>[
                'article_id'=>'require|number',
                'article_title'=>'chsDash',
            ],
            'delete_article'=>[
                'article_id'=>'require|number',
            ],
        ]
    ];

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->request = Request::instance();
//        $this->check_time($this->request->only(['time']));
//        $this->check_token($this->request->param());
        $this->params = $this->check_params($this->request->param(true));


    }

    /**
     * 验证请求是否超时
     * @param $arr
     */
    public function check_time($arr)
    {
        if (!isset($arr['time']) || intval($arr['time']) <= 1) {
            $this->return_msg(400, '时间戳不正确!');
        }
        if (time() - intval($arr['time']) > 60) {
            $this->return_msg(400, '请求超时!');
        }
    }

    /**
     * 返回错误信息
     * @param $code 状态码
     * @param $msg  错误信息
     * @param array $data 数据
     * 返回json格式错误信息
     */
    public function return_msg($code, $msg, $data = [])
    {
        $return_data['code'] = $code;
        $return_data['msg'] = $msg;
        $return_data['data'] = $data;
        echo json_encode($return_data);
        die;
    }

    /**
     * 验证token
     * @param $arr
     * 返回验证结果 JSON 格式
     */
    public function check_token($arr)
    {
        /*客户端传过来的token*/
        if (!isset($arr['token']) || empty($arr['token'])) {


            $this->return_msg(400, 'token不能为空!');
        }

        $app_token = $arr['token'];/*api传过来的token*/

        /*服务端生成token*/
        unset($arr['token']);
        $service_token = '';
        foreach ($arr as $k => $v) {
            $service_token .= md5($v);
        }
        $service_token = md5('api_' . $service_token . '_api');

        if ($app_token !== $service_token) {
            $this->return_msg(400, 'token值不正确!');
        }
    }

    /**
     * 验证参数  参数过滤
     * @param $arr  验证除了time，token以外所有的参数
     * @return mixed 返回符合验证规则的数据
     */
    public function check_params($arr)
    {
        /*获取参数的验证规则*/
        $rule = $this->rules[$this->request->controller()][$this->request->action()];
//        $rule = $this->rules['User']['login'];

        /*验证参数并返回错误*/
        $this->validate = new Validate($rule);
        if (!$this->validate->check($arr)) {
            $this->return_msg(400, $this->validate->getError());
        }

        /*通过验证*/
        return $arr;
    }

    /**
     * 验证用户名类型
     * @param $username  手机号或邮箱
     * @return string 检测的结果
     */

    public function check_username($username)
    {

        /*是否为邮箱*/
        $is_email = Validate::is($username, 'email') ? 1 : 0;
        /*是否为手机号码*/
        $is_phone = Validate::is($username, '/^1[34578]\d{9}$/') ? 4 : 2;
        $flag = $is_email + $is_phone;
        switch ($flag) {
            /*not phone not email*/
            case 2:
                $this->return_msg(400, '邮箱或手机号不正确！');
                break;

            /*is email not phone*/
            case 3:
                return 'email';
                break;

            /*is phone not email*/
            case 4:
                return 'phone';
                break;
        }
    }


    /**
     * 判断用户是否存在
     * @param $value    手机号/邮箱
     * @param $type phone/email
     * @param $exist 0:不希望存在 1:希望存在
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function check_exist($value, $type, $exist)
    {

        $type_num = $type == 'phone' ? 2 : 4;
        $flag = $type_num + $exist;
        $phone_res = db('user')->where('user_phone', $value)->find();
        $email_res = db('user')->where('user_email', $value)->find();

        switch ($flag) {
            /*2+0 phone need no exist*/
            case 2:
                if ($phone_res) {
                    $this->return_msg(400, '此手机号已被占用!');
                }
                break;
            /*2+1 phone need exist*/
            case 3:
                if (!$phone_res) {
                    $this->return_msg(400, '此手机号不存在!');
                }
                break;
            /*4+0 email need no exist*/
            case 4:
                if ($email_res) {
                    $this->return_msg(400, '此邮箱已被占用!');
                }
                break;
            /*4+1 email need exist*/
            case 5:
                if (!$email_res) {
                    $this->return_msg(400, '此邮箱不存在!');
                }
                break;
        }
    }


    /**
     * 检测验证码
     * @param $user_name    手机号/邮箱
     * @param $code 验证码
     *
     */
    public function check_code($user_name, $code)
    {

        /*检测是否超时*/
        $last_time = session($user_name . '_last_send_time');
        if (time() - $last_time > 60) {
            $this->return_msg(400, '验证码超时,请在一分钟内验证!');
        }
        /*验证 验证码是否正确*/
        /**

        $md5_code = md5($username . '_' . md5($code));
        session($username . '_code', $md5_code);
         */

        $md5_code = md5($user_name . '_' . md5($code));
        if (session($user_name . '_code') !== $md5_code) {
            $this->return_msg(400, '验证码不正确!');
        }

        /*不管正确与否 清空验证码 每个验证码验证一次*/
        session($user_name . '_code', null);

    }


    /**
     * 上传文件到服务器
     * @param $file 文件路径
     * @param string $type 文件类型
     * @return string   返回文件上传后的保存路径
     */
    public function upload_file($file, $type = '')
    {
        $info = $file->move(ROOT_PATH . 'public' . DS . 'uploads');
        if ($info) {
            $path = 'uploads/' . $info->getSaveName();
            /*裁剪图片*/
            if (!empty($type)) {
                $this->image_edit($path, $type);
            }
            return $path;
        } else {
            $this->return_msg(400, '头像上传失败!');
        }

    }

    /**
     * 图片裁剪
     * @param $path 文件路径
     * @param $type 文件类型
     */
    public function image_edit($path, $type)
    {
        $image = Image::open(ROOT_PATH . 'public/' . $path);
        dump(ROOT_PATH . 'public/' . $path);
        switch ($type) {
            case 'head_img':
                $image->thumb(200, 200, Image::THUMB_CENTER)->save(ROOT_PATH . 'public/' . $path);
                break;
        }
    }
}